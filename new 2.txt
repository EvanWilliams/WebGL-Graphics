<!-- This program draws multiple shapes with different colors -->

<html>

<head>

<!-- script files for webgl set up and math operations -->
<script type="text/javascript" src="webgl-utils.js"></script>
<script type="text/javascript" src="init-shaders.js"></script>
<script type="text/javascript" src="math.js"></script>

<!-- vertex shader -->
<script id="vertex-shader" type="x-shader/x-vertex">	
attribute vec4 aPosition;       //vertex coordinate			
uniform mat4 uMatrix;			//uniform uMatrix

void main()
{	
	gl_Position = uMatrix * aPosition;
}
</script>

<!-- fragment shader -->
<script id="fragment-shader" type="x-shader/x-fragment">
precision mediump float;                     //medium float precision
uniform vec4 uColor;				//uColor
void main()
{
    gl_FragColor = uColor; //use varying fragment color
}
</script>

<script>
//main drawing function
	var gl,uMatrix,uColor;
	var factor;			
	//how much to scale the yellow circle
	var offset = 0.0;	
	// how for to move the ocilating brown square
	var sign = 1.0;		
	// var when to change the direction of the scaling
	var sign2 = -1.0;	
	// var for when to change the direction of the ocillating
	var angle = 0.0;	
	//angle to rotate first triangle
	var angle2 = 0.0;	
	//angle to rotate second triangle

function main()
{

	var vertices = [
	
	];
	//Set up Webgl
	var canvas = document.getElementById("gl-canvas");
    gl = WebGLUtils.setupWebGL(canvas);
    
    //set up shaders
    var program = initShaders(gl, 
	"vertex-shader", "fragment-shader");
    gl.useProgram(program);

    //create vertex buffer and bind it
    var vertexBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);

    //connect vertex bufffer to attribute variable aPosition
    var aPosition = gl.getAttribLocation(program, "aPosition");
    gl.vertexAttribPointer(aPosition, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(aPosition);
	
	makeDisk(vertices,0.1,100);//Circle
	makeTriangles(vec2(0.5,0.0),vec2(-0.25,-0.433),
	vec2(-0.25,0.433),4,vertices);//Triangle
	vertices.push(vec2(-0.25,-0.25),vec2(-0.25,0.25),
	vec2(0.25,-0.25),vec2(0.25,0.25));//Square
	
	gl.bufferData(gl.ARRAY_BUFFER, 
	flatten(vertices), gl.STATIC_DRAW);
	//connect to uniform uAngle
	uMatrix = gl.getUniformLocation(program, "uMatrix");
	//connect to uniform uColor
	uColor = gl.getUniformLocation(program, "uColor");
	
	//inital scaling factor
	factor = 1.0;
	
	gl.viewport(0, 0, canvas.width, canvas.height);
	
    gl.clearColor(0.0, 0.0, 0.0, 1.0);
	
	draw();
	}
	
	function draw()
	{
		
	
	
		
		// circle that is rotating
		matrix1 = scaling(.45, .45, 0.0);
		
		matrix2 = translate(0.12,0, 0.0);
		
		matrix3 = rotatez(angle);
		var matrix4 = translate(0.66,-0.5, 0.0);
		//multiply matrices
		matrix = multiply(matrix4,
		multiply(matrix3, multiply(matrix2, matrix1)));
		//set Matrix
		gl.uniformMatrix4fv(uMatrix,
		false, flatten(matrix));
		//set color
		gl.uniform4fv(uColor, 
		flatten(vec4(1.0,1.0,1.0,1.0)));
		//Draw Circle
		gl.drawArrays(gl.TRIANGLE_FAN, 0, 100);
		
		
		requestAnimationFrame(draw);
	
	}
	
	function makeDisk(vertexArray, radius, count)
	{
		var theta = 2*Math.PI/count;				
		//small angle
		
		for (var i = 0; i < count; i++)				
		//generate points on a circle
		{
			var x = radius*Math.cos(i*theta);	
			//x coordinate of pointer
			var y = radius*Math.sin(i*theta);	
			//y coordinate of pointer
			
			vertexArray.push(vec2(x,y));
		}
	
	}

	//helper functio
</script>

</head>

<!-- draw scene -->
<body onload="main()">

<!-- canvas for drawing scene -->
<canvas id="gl-canvas" width="900" height="600"></canvas>

</body>

</html>